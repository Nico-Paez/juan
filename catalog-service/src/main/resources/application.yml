server:
  port: 0
management:
  tracing:
    sampling:
      probability: 1.0
  endpoints:
    web:
      exposure:
        include: '*'
  health:
    circuitbreakers:
      enabled: true
  endpoint:
    health:
      show-details: always
    circuitbreakers:
      enabled: true


de:
  flapdoodle:
    mongodb:
      embedded:
        version: 5.0.5

spring:
  application:
    name: catalog-service
  rabbitmq:
    username: guest
    password: guest
    host: localhost
    port: 5672
  data:
    mongodb:
      database: catalog
      port: 27019

  #esto por si no entendes es para deshabilitar la dependencia de configuracion centralizada en github, tambien lo agregue en los demas yml para q no salte el error
  cloud:
    config:
      enabled: false
  #hasta aca
queue:
  movie:
    name: MovieQueue
  serie:
    name: SerieQueue

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    registry-fetch-interval-seconds: 5
    healthcheck:
      enabled: true
    service-url:
      default-zone: http://localhost:8761/eureka
  instance:
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 10


resilience4j:
  circuitbreaker:
    instances:
      movie:
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 5
        failureRateThreshold: 50
        #        tiempo de espera en milisegundos en estado abierto
        waitDurationInOpenState: 15000
        #        para ver si el servicio se recuperó, le voy a decir, esperá 3 llamadas para poder decir, pasalo a estado cerrado
        permittedNumberOfCallsInHalfOpenState: 3
        #        vamos a definir que hacemos con el estado del servicio cuando se abrio
        #        esto esa para ver la informacion del servicio en actuator
        registerHealthIndicator: true
        #        aca le decimos marca el servicio como down q no lo pueda ver nadie, esta en false porque tenemos q ver
        #         como pasamos el serv a up
        allowHealthIndicatorToFail: false
        automaticTransitionFromOpenToHalfOpenEnabled: true
      serie:
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 5
        failureRateThreshold: 50
        #        tiempo de espera en milisegundos en estado abierto
        waitDurationInOpenState: 15000
        #        para ver si el servicio se recuperó, le voy a decir, esperá 3 llamadas para poder decir, pasalo a estado cerrado
        permittedNumberOfCallsInHalfOpenState: 3
        #        vamos a definir que hacemos con el estado del servicio cuando se abrio
        #        esto esa para ver la informacion del servicio en actuator
        registerHealthIndicator: true
        #        aca le decimos marca el servicio como down q no lo pueda ver nadie, esta en false porque tenemos q ver
        #         como pasamos el serv a up
        allowHealthIndicatorToFail: false
        automaticTransitionFromOpenToHalfOpenEnabled: true
  #     HASTA ACA ESTA TERMINADO EL EJERCICIO (este q vamos a ver es otro módulo de resilience4j)
  #  Lo que vemos en el retry es cuanto tiempo queremos esperar entre cada uno de los reintentos
  retry:
    instances:
      movie:
        #        waitDuration: 1000
        #        maxAttempts: 3
        #        retryExceptions:
        #          - feign.FeignException$InternalServerError

        waitDuration: 1000
        #        Le decimos la cantidad de reintentos que queremos hacer
        maxAttempts: 3
        #        y la excepción contra la q queremos reintentar
        retryExceptions:
          - feign.FeignException$InternalServerError

      serie:
        #        waitDuration: 1000
        #        maxAttempts: 3
        #        retryExceptions:
        #          - feign.FeignException$InternalServerError

        waitDuration: 1000
        #        Le decimos la cantidad de reintentos que queremos hacer
        maxAttempts: 3
        #        y la excepción contra la q queremos reintentar
        retryExceptions:
          - feign.FeignException$InternalServerError